import numpy as np

from .plane import AbsPlane
from .ray import Ray

class Triangle(AbsPlane):
    def __init__(self, p1, p2, p3, surface_color):
        self._p1 = p1
        self._p2 = p2
        self._p3 = p3
        self._v1to2 = np.subtract(self._p2, self._p1)
        self._v2to3 = np.subtract(self._p3, self._p2)
        self._v3to1 = np.subtract(self._p1, self._p3)

        n = np.cross(self._v1to2, self._v2to3)
        self._surface_color = surface_color

        normal = n / np.linalg.norm(n)
        super().__init__(normal)

    def intersect(self, ray):
        d = np.dot(ray.direction(), self._normal)

        if abs(d) < 1e-5:
            return None, None

        n = np.dot((self._p1 - ray.origin()), self._normal)
        t = n / d

        if t < 0:
            return None, None

        # Intersection point of triangle ans ray.
        p = ray.extension_point(t)

        # Vector from p<N> to intersection point.
        v1toP = np.subtract(p, self._p1)
        v2toP = np.subtract(p, self._p2)
        v3toP = np.subtract(p, self._p3)

        # Normal vector generated by cross function.
        nv1 = np.cross(self._v1to2, v1toP)
        nv2 = np.cross(self._v2to3, v2toP)
        nv3 = np.cross(self._v3to1, v3toP)

        # Inner product
        ip1 = np.dot(ray.direction(), nv1)
        ip2 = np.dot(ray.direction(), nv2)
        ip3 = np.dot(ray.direction(), nv3)

        # Check if the inner product values all have the save sign
        f1 = all(map(lambda x: x < 0,[ip1, ip2, ip3]))
        f2 = all(map(lambda x: x > 0,[ip1, ip2, ip3]))
        if not (f1 or f2):
            return None, None

        return t, p
